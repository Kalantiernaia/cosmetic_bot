import os
import logging
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import ContentType

# ========== 1) –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

# ========== 2) –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ==========
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logging.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
    exit(1)

# ========== 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ==========
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ========== 4) –•—ç–Ω–¥–ª–µ—Ä—ã ==========
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ—Å–º–µ—Ç–∏–∫–∏.\n"
        "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —É–ø–∞–∫–æ–≤–∫–∏ ‚Äì –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å."
    )

@dp.message(F.content_type == ContentType.PHOTO)
async def handle_photo(message: types.Message):
    await message.answer("üñºÔ∏è –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶")
    # TODO: –≤—Å—Ç–∞–≤—å—Ç–µ –∑–¥–µ—Å—å —Å–≤–æ–π –∫–æ–¥ OCR / –∞–Ω–∞–ª–∏–∑–∞
    await message.answer("–ü–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@dp.message()
async def fallback(message: types.Message):
    await message.answer("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ /start –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–ø–∞–∫–æ–≤–∫–∏.")

# ========== 5) –ó–∞–ø—É—Å–∫ –¥–æ–ª–≥–æ–≥–æ –æ–ø—Ä–æ—Å–∞ (long polling) ==========
if __name__ == "__main__":
    # dp.run_polling –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç bot.delete_webhook(), skip_updates=True —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    dp.run_polling(bot, skip_updates=True)

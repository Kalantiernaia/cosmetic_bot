import os
import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ ‚Äì –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ—ë:
# from cosmetics_analyzer import analyze_cosmetics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TG_TOKEN")  # —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –≤–∞—à –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ Railway

# ---- –•–ï–ù–î–õ–ï–†–´ ----

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ—Å–º–µ—Ç–∏–∫–∏.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —É–ø–∞–∫–æ–≤–∫–∏."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Å–º–µ—Ç–∏–∫—É:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ –ò–ª–∏ —Ñ–æ—Ç–æ —ç—Ç–∏–∫–µ—Ç–∫–∏\n"
        "–Ø –≤–µ—Ä–Ω—É –≤–∞–º –æ—Ü–µ–Ω–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–∞–≤–∞."
    )

async def analyse_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º –≤–∞—à—É –ª–æ–≥–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞:
    # result = analyze_cosmetics(text)
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ —ç—Ö–æ-–æ—Ç–≤–µ—Ç:
    result = f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç:\n{text[:100]}‚Ä¶\n(–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)"
    await update.message.reply_text(result)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", exc_info=context.error)
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ –±–µ–∑ –ø–∞–Ω–∏–∫–∏
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text(
            "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help."
        )

# ---- –¢–û–ß–ö–ê –í–•–û–î–ê ----

def main() -> None:
    app = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))

    # –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–π–¥—É—Ç –≤ analyse_text
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, analyse_text))
    # (–ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ —Ñ–æ—Ç–æ—Ö–µ–Ω–¥–ª–µ—Ä)

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π error handler
    app.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫
    app.run_webhook()  # –∏–ª–∏ .run_polling() –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞

if __name__ == "__main__":
    main()
